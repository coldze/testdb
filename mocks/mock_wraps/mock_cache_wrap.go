// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/coldze/testdb/logic/sources/wraps (interfaces: CacheWrap)

// Package mock_wraps is a generated GoMock package.
package mock_wraps

import (
	"reflect"
	"time"

	"github.com/golang/mock/gomock"
)

// MockCacheWrap is a mock of CacheWrap interface
type MockCacheWrap struct {
	ctrl     *gomock.Controller
	recorder *MockCacheWrapMockRecorder
}

// MockCacheWrapMockRecorder is the mock recorder for MockCacheWrap
type MockCacheWrapMockRecorder struct {
	mock *MockCacheWrap
}

// NewMockCacheWrap creates a new mock instance
func NewMockCacheWrap(ctrl *gomock.Controller) *MockCacheWrap {
	mock := &MockCacheWrap{ctrl: ctrl}
	mock.recorder = &MockCacheWrapMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockCacheWrap) EXPECT() *MockCacheWrapMockRecorder {
	return m.recorder
}

// Close mocks base method
func (m *MockCacheWrap) Close() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Close")
	ret0, _ := ret[0].(error)
	return ret0
}

// Close indicates an expected call of Close
func (mr *MockCacheWrapMockRecorder) Close() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Close", reflect.TypeOf((*MockCacheWrap)(nil).Close))
}

// Del mocks base method
func (m *MockCacheWrap) Del(arg0 string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Del", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// Del indicates an expected call of Del
func (mr *MockCacheWrapMockRecorder) Del(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Del", reflect.TypeOf((*MockCacheWrap)(nil).Del), arg0)
}

// Flush mocks base method
func (m *MockCacheWrap) Flush() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Flush")
	ret0, _ := ret[0].(error)
	return ret0
}

// Flush indicates an expected call of Flush
func (mr *MockCacheWrapMockRecorder) Flush() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Flush", reflect.TypeOf((*MockCacheWrap)(nil).Flush))
}

// Get mocks base method
func (m *MockCacheWrap) Get(arg0 string) (interface{}, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Get", arg0)
	ret0, _ := ret[0].(interface{})
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Get indicates an expected call of Get
func (mr *MockCacheWrapMockRecorder) Get(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Get", reflect.TypeOf((*MockCacheWrap)(nil).Get), arg0)
}

// Set mocks base method
func (m *MockCacheWrap) Set(arg0 string, arg1 interface{}, arg2 time.Duration) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Set", arg0, arg1, arg2)
	ret0, _ := ret[0].(error)
	return ret0
}

// Set indicates an expected call of Set
func (mr *MockCacheWrapMockRecorder) Set(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Set", reflect.TypeOf((*MockCacheWrap)(nil).Set), arg0, arg1, arg2)
}
